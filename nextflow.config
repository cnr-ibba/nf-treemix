
params {
    // pipeline input args
    input                   = null
    plink_prefix            = null
    migrations              = 0
    single_migration        = false

    // general options
    publish_dir_mode        = 'link'
    outdir                  = './results'
    tracedir                = "${params.outdir}/pipeline_info"

    // PLINK options
    plink_species_opts      = '--chr-set 26 no-xy no-mt --allow-no-sex'

    // treemix/orientagraph options
    treemix_outgroup        = null
    treemix_k               = null
    with_orientagraph       = false
    treemix_vertices        = null
    treemix_edges           = null

    // bootstrapping options
    with_bootstrap          = false
    bootstrap_iterations    = 5

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory              = '64.GB'
    max_cpus                = 16
    max_time                = '480.h'
}


// Load base.config by default for all pipelines
includeConfig 'conf/base.config'


profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda     = true
        docker.enabled          = false
        singularity.enabled     = false
    }
    docker {
        docker.enabled          = true
        docker.userEmulation    = true
        singularity.enabled     = false
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        docker.enabled          = false
    }
    slurm {
        // within this configuration, I will apply this to every process
        process.executor        = 'slurm'
    }
    test { includeConfig 'conf/test.config' }
}


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']


def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}


manifest {
    name            = 'cnr-ibba/nf-treemix'
    author          = 'Paolo Cozzi <paolo.cozzi@ibba.cnr.it>'
    homePage        = 'https://github.com/cnr-ibba/nf-treemix'
    description     = 'A nextflow pipeline which execute treemix on a population of interest'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '0.2.1'
}


// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
